/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("if (true) {\n    document.getElementById(\"simulate-button\").addEventListener(\"click\", simulateCache);\n    function simulateCache() {\n        const blockSize = parseInt(document.getElementById(\"block-size\").value);\n        const mainMemoryInput = document.getElementById(\"main-memory\").value;\n        const mainMemoryType = document.querySelector(\"#main-memory-type\").value;\n        const cacheMemoryInput = document.getElementById(\"cache-memory\").value;\n        const cacheMemoryType = document.querySelector(\"#cache-memory-type\").value;\n        const programFlowInput = document.getElementById(\"program-flow\").value;\n        const cacheAccessTime = parseInt(document.getElementById(\"cache-access-time\").value);\n        const memoryAccessTime = parseInt(document.getElementById(\"memory-access-time\").value);\n        // Convert program flow input into blocks if necessary\n        const programFlow = programFlowInput.split(\",\").map(Number);\n        // Convert main memory size and cache memory size into blocks\n        const mainMemorySize = mainMemoryType === \"blocks\" ? parseInt(mainMemoryInput) : Math.ceil(parseInt(mainMemoryInput) / blockSize);\n        const cacheMemorySize = cacheMemoryType === \"blocks\" ? parseInt(cacheMemoryInput) : Math.ceil(parseInt(cacheMemoryInput) / blockSize);\n        // Initialize cache and main memory\n        let cache = [];\n        let mainMemory = new Array(mainMemorySize).fill(null).map((_, index)=>index);\n        let hits = 0;\n        let misses = 0;\n        let time = 0;\n        // Cache structure\n        const cacheBlocks = cacheMemorySize;\n        const cacheData = new Array(cacheBlocks).fill(null);\n        const cacheTime = new Array(cacheBlocks).fill(0);\n        // Track time\n        let currentTime = 0;\n        programFlow.forEach((address)=>{\n            let block = Math.floor(address / blockSize);\n            let index = cacheData.indexOf(block);\n            if (index !== -1) {\n                // Cache hit\n                hits++;\n                time += cacheAccessTime; // Add cache access time on hit\n                cacheTime[index] = ++currentTime;\n            } else {\n                // Cache miss\n                misses++;\n                time += memoryAccessTime; // Add memory access time on miss\n                if (cacheData.length < cacheMemorySize) {\n                    // Cache not full, just add new block\n                    cacheData[cacheData.indexOf(null)] = block;\n                } else {\n                    // Cache full, replace least recently used block\n                    let lruIndex = cacheTime.indexOf(Math.min(...cacheTime));\n                    cacheData[lruIndex] = block;\n                    cacheTime[lruIndex] = ++currentTime;\n                }\n            }\n            currentTime++; // Add 1 unit of time for the memory access\n        });\n        // Calculations\n        const totalAccesses = programFlow.length;\n        const hitRate = hits / totalAccesses;\n        const missRate = misses / totalAccesses;\n        const missPenalty = 11; // given\n        const averageAccessTime = hitRate * cacheAccessTime + missRate * missPenalty;\n        const totalAccessTime = hits * blockSize * cacheAccessTime + misses * blockSize * missPenalty + misses * cacheAccessTime;\n        // Display results\n        document.getElementById(\"hits\").innerText = \"Cache Hits: \".concat(hits, \"/\").concat(totalAccesses);\n        document.getElementById(\"misses\").innerText = \"Cache Misses: \".concat(misses, \"/\").concat(totalAccesses);\n        document.getElementById(\"average-access-time\").innerText = \"Average Memory Access Time: \".concat(averageAccessTime.toFixed(2), \"ns\");\n        document.getElementById(\"total-access-time\").innerText = \"Total Memory Access Time: \".concat(totalAccessTime, \"ns\");\n        // Cache snapshot\n        let cacheSnapshot = cacheData.map((block, idx)=>\"Block \".concat(idx, \": \").concat(block)).join(\"\\n\");\n        document.getElementById(\"cache-snapshot\").innerText = cacheSnapshot;\n    }\n    document.getElementById(\"download-results\").addEventListener(\"click\", downloadResults);\n    function downloadResults() {\n        let resultText = \"\\n      Hits: \".concat(document.getElementById(\"hits\").innerText, \"\\n      Misses: \").concat(document.getElementById(\"misses\").innerText, \"\\n      Average Memory Access Time: \").concat(document.getElementById(\"average-access-time\").innerText, \"\\n      Total Memory Access Time: \").concat(document.getElementById(\"total-access-time\").innerText, \"\\n      Cache Snapshot: \").concat(document.getElementById(\"cache-snapshot\").innerText, \"\\n    \");\n        let blob = new Blob([\n            resultText\n        ], {\n            type: \"text/plain\"\n        });\n        let link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = \"cache_simulation_results.txt\";\n        link.click();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n"));

/***/ })

});