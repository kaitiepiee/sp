/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("document.getElementById(\"simulate-button\").addEventListener(\"click\", simulateCache);\nfunction simulateCache() {\n    const blockSize = parseInt(document.getElementById(\"block-size\").value);\n    const mainMemoryInput = document.getElementById(\"main-memory\").value;\n    const mainMemoryType = document.querySelector(\"#main-memory-type\").value;\n    const cacheMemoryInput = document.getElementById(\"cache-memory\").value;\n    const cacheMemoryType = document.querySelector(\"#cache-memory-type\").value;\n    const programFlowInput = document.getElementById(\"program-flow\").value;\n    const cacheAccessTime = parseInt(document.getElementById(\"cache-access-time\").value);\n    const memoryAccessTime = parseInt(document.getElementById(\"memory-access-time\").value);\n    // Convert program flow input into blocks if necessary\n    const programFlow = programFlowInput.split(\",\").map(Number);\n    // Convert main memory size and cache memory size into blocks\n    const mainMemorySize = mainMemoryType === \"blocks\" ? parseInt(mainMemoryInput) : Math.ceil(parseInt(mainMemoryInput) / blockSize);\n    const cacheMemorySize = cacheMemoryType === \"blocks\" ? parseInt(cacheMemoryInput) : Math.ceil(parseInt(cacheMemoryInput) / blockSize);\n    // Initialize cache and main memory\n    let cache = [];\n    let mainMemory = new Array(mainMemorySize).fill(null).map((_, index)=>index);\n    let hits = 0;\n    let misses = 0;\n    let time = 0;\n    // Cache structure\n    const cacheBlocks = cacheMemorySize;\n    const cacheData = new Array(cacheBlocks).fill(null);\n    const cacheTime = new Array(cacheBlocks).fill(0);\n    // Track time\n    let currentTime = 0;\n    programFlow.forEach((address)=>{\n        let block = Math.floor(address / blockSize);\n        let index = cacheData.indexOf(block);\n        if (index !== -1) {\n            // Cache hit\n            hits++;\n            time += cacheAccessTime; // Add cache access time on hit\n            cacheTime[index] = ++currentTime;\n        } else {\n            // Cache miss\n            misses++;\n            time += memoryAccessTime; // Add memory access time on miss\n            if (cacheData.length < cacheMemorySize) {\n                // Cache not full, just add new block\n                cacheData[cacheData.indexOf(null)] = block;\n            } else {\n                // Cache full, replace least recently used block\n                let lruIndex = cacheTime.indexOf(Math.min(...cacheTime));\n                cacheData[lruIndex] = block;\n                cacheTime[lruIndex] = ++currentTime;\n            }\n        }\n        currentTime++; // Add 1 unit of time for the memory access\n    });\n    // Calculations\n    const totalAccesses = programFlow.length;\n    const hitRate = hits / totalAccesses;\n    const missRate = misses / totalAccesses;\n    const cacheMissPenalty = 11; // given\n    const averageAccessTime = hitRate * cacheAccessTime + missRate * cacheMissPenalty;\n    const totalAccessTime = hits * cacheAccessTime + misses * cacheMissPenalty + misses * cacheAccessTime;\n    // Display results\n    document.getElementById(\"hits\").innerText = \"Cache Hits: \".concat(hits, \"/\").concat(totalAccesses);\n    document.getElementById(\"misses\").innerText = \"Cache Misses: \".concat(misses, \"/\").concat(totalAccesses);\n    document.getElementById(\"average-access-time\").innerText = \"Average Memory Access Time: \".concat(averageAccessTime.toFixed(2), \"ns\");\n    document.getElementById(\"total-access-time\").innerText = \"Total Memory Access Time: \".concat(totalAccessTime, \"ns\");\n    // Cache snapshot\n    let cacheSnapshot = cacheData.map((block, idx)=>\"Block \".concat(idx, \": \").concat(block)).join(\"\\n\");\n    document.getElementById(\"cache-snapshot\").innerText = cacheSnapshot;\n}\ndocument.getElementById(\"download-results\").addEventListener(\"click\", downloadResults);\nfunction downloadResults() {\n    let resultText = \"\\n        Hits: \".concat(document.getElementById(\"hits\").innerText, \"\\n        Misses: \").concat(document.getElementById(\"misses\").innerText, \"\\n        Average Memory Access Time: \").concat(document.getElementById(\"average-access-time\").innerText, \"\\n        Total Memory Access Time: \").concat(document.getElementById(\"total-access-time\").innerText, \"\\n        Cache Snapshot: \").concat(document.getElementById(\"cache-snapshot\").innerText, \"\\n    \");\n    let blob = new Blob([\n        resultText\n    ], {\n        type: \"text/plain\"\n    });\n    let link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"cache_simulation_results.txt\";\n    link.click();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVM2RCxhQUFhLENBQUM7SUFDbENELEtBQUtFLElBQUksR0FBR0MsSUFBSUMsZUFBZSxDQUFDUDtJQUNoQ0csS0FBS0ssUUFBUSxHQUFHO0lBQ2hCTCxLQUFLTSxLQUFLO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvaW5kZXguanM/YmVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ltdWxhdGUtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaW11bGF0ZUNhY2hlKTtcblxuZnVuY3Rpb24gc2ltdWxhdGVDYWNoZSgpIHtcbiAgICBjb25zdCBibG9ja1NpemUgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmxvY2stc2l6ZScpLnZhbHVlKTtcbiAgICBjb25zdCBtYWluTWVtb3J5SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1tZW1vcnknKS52YWx1ZTtcbiAgICBjb25zdCBtYWluTWVtb3J5VHlwZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLW1lbW9yeS10eXBlJykudmFsdWU7XG4gICAgY29uc3QgY2FjaGVNZW1vcnlJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWNoZS1tZW1vcnknKS52YWx1ZTtcbiAgICBjb25zdCBjYWNoZU1lbW9yeVR5cGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FjaGUtbWVtb3J5LXR5cGUnKS52YWx1ZTtcbiAgICBjb25zdCBwcm9ncmFtRmxvd0lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyYW0tZmxvdycpLnZhbHVlO1xuICAgIGNvbnN0IGNhY2hlQWNjZXNzVGltZSA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWNoZS1hY2Nlc3MtdGltZScpLnZhbHVlKTtcbiAgICBjb25zdCBtZW1vcnlBY2Nlc3NUaW1lID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lbW9yeS1hY2Nlc3MtdGltZScpLnZhbHVlKTtcblxuICAgIC8vIENvbnZlcnQgcHJvZ3JhbSBmbG93IGlucHV0IGludG8gYmxvY2tzIGlmIG5lY2Vzc2FyeVxuICAgIGNvbnN0IHByb2dyYW1GbG93ID0gcHJvZ3JhbUZsb3dJbnB1dC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuXG4gICAgLy8gQ29udmVydCBtYWluIG1lbW9yeSBzaXplIGFuZCBjYWNoZSBtZW1vcnkgc2l6ZSBpbnRvIGJsb2Nrc1xuICAgIGNvbnN0IG1haW5NZW1vcnlTaXplID0gbWFpbk1lbW9yeVR5cGUgPT09ICdibG9ja3MnXG4gICAgICAgID8gcGFyc2VJbnQobWFpbk1lbW9yeUlucHV0KVxuICAgICAgICA6IE1hdGguY2VpbChwYXJzZUludChtYWluTWVtb3J5SW5wdXQpIC8gYmxvY2tTaXplKTtcblxuICAgIGNvbnN0IGNhY2hlTWVtb3J5U2l6ZSA9IGNhY2hlTWVtb3J5VHlwZSA9PT0gJ2Jsb2NrcydcbiAgICAgICAgPyBwYXJzZUludChjYWNoZU1lbW9yeUlucHV0KVxuICAgICAgICA6IE1hdGguY2VpbChwYXJzZUludChjYWNoZU1lbW9yeUlucHV0KSAvIGJsb2NrU2l6ZSk7XG5cbiAgICAvLyBJbml0aWFsaXplIGNhY2hlIGFuZCBtYWluIG1lbW9yeVxuICAgIGxldCBjYWNoZSA9IFtdO1xuICAgIGxldCBtYWluTWVtb3J5ID0gbmV3IEFycmF5KG1haW5NZW1vcnlTaXplKS5maWxsKG51bGwpLm1hcCgoXywgaW5kZXgpID0+IGluZGV4KTtcblxuICAgIGxldCBoaXRzID0gMDtcbiAgICBsZXQgbWlzc2VzID0gMDtcbiAgICBsZXQgdGltZSA9IDA7XG5cbiAgICAvLyBDYWNoZSBzdHJ1Y3R1cmVcbiAgICBjb25zdCBjYWNoZUJsb2NrcyA9IGNhY2hlTWVtb3J5U2l6ZTtcbiAgICBjb25zdCBjYWNoZURhdGEgPSBuZXcgQXJyYXkoY2FjaGVCbG9ja3MpLmZpbGwobnVsbCk7XG4gICAgY29uc3QgY2FjaGVUaW1lID0gbmV3IEFycmF5KGNhY2hlQmxvY2tzKS5maWxsKDApO1xuXG4gICAgLy8gVHJhY2sgdGltZVxuICAgIGxldCBjdXJyZW50VGltZSA9IDA7XG5cbiAgICBwcm9ncmFtRmxvdy5mb3JFYWNoKGFkZHJlc3MgPT4ge1xuICAgICAgICBsZXQgYmxvY2sgPSBNYXRoLmZsb29yKGFkZHJlc3MgLyBibG9ja1NpemUpO1xuICAgICAgICBsZXQgaW5kZXggPSBjYWNoZURhdGEuaW5kZXhPZihibG9jayk7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gQ2FjaGUgaGl0XG4gICAgICAgICAgICBoaXRzKys7XG4gICAgICAgICAgICB0aW1lICs9IGNhY2hlQWNjZXNzVGltZTsgLy8gQWRkIGNhY2hlIGFjY2VzcyB0aW1lIG9uIGhpdFxuICAgICAgICAgICAgY2FjaGVUaW1lW2luZGV4XSA9ICsrY3VycmVudFRpbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDYWNoZSBtaXNzXG4gICAgICAgICAgICBtaXNzZXMrKztcbiAgICAgICAgICAgIHRpbWUgKz0gbWVtb3J5QWNjZXNzVGltZTsgLy8gQWRkIG1lbW9yeSBhY2Nlc3MgdGltZSBvbiBtaXNzXG4gICAgICAgICAgICBpZiAoY2FjaGVEYXRhLmxlbmd0aCA8IGNhY2hlTWVtb3J5U2l6ZSkge1xuICAgICAgICAgICAgICAgIC8vIENhY2hlIG5vdCBmdWxsLCBqdXN0IGFkZCBuZXcgYmxvY2tcbiAgICAgICAgICAgICAgICBjYWNoZURhdGFbY2FjaGVEYXRhLmluZGV4T2YobnVsbCldID0gYmxvY2s7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENhY2hlIGZ1bGwsIHJlcGxhY2UgbGVhc3QgcmVjZW50bHkgdXNlZCBibG9ja1xuICAgICAgICAgICAgICAgIGxldCBscnVJbmRleCA9IGNhY2hlVGltZS5pbmRleE9mKE1hdGgubWluKC4uLmNhY2hlVGltZSkpO1xuICAgICAgICAgICAgICAgIGNhY2hlRGF0YVtscnVJbmRleF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICBjYWNoZVRpbWVbbHJ1SW5kZXhdID0gKytjdXJyZW50VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VGltZSsrOyAvLyBBZGQgMSB1bml0IG9mIHRpbWUgZm9yIHRoZSBtZW1vcnkgYWNjZXNzXG4gICAgfSk7XG5cbiAgICAvLyBDYWxjdWxhdGlvbnNcbiAgICBjb25zdCB0b3RhbEFjY2Vzc2VzID0gcHJvZ3JhbUZsb3cubGVuZ3RoO1xuICAgIGNvbnN0IGhpdFJhdGUgPSBoaXRzIC8gdG90YWxBY2Nlc3NlcztcbiAgICBjb25zdCBtaXNzUmF0ZSA9IG1pc3NlcyAvIHRvdGFsQWNjZXNzZXM7XG4gICAgY29uc3QgY2FjaGVNaXNzUGVuYWx0eSA9IDExOyAvLyBnaXZlblxuICAgIGNvbnN0IGF2ZXJhZ2VBY2Nlc3NUaW1lID0gaGl0UmF0ZSAqIGNhY2hlQWNjZXNzVGltZSArIG1pc3NSYXRlICogY2FjaGVNaXNzUGVuYWx0eTtcbiAgICBjb25zdCB0b3RhbEFjY2Vzc1RpbWUgPSBoaXRzICogY2FjaGVBY2Nlc3NUaW1lICsgbWlzc2VzICogY2FjaGVNaXNzUGVuYWx0eSArIG1pc3NlcyAqIGNhY2hlQWNjZXNzVGltZTtcblxuICAgIC8vIERpc3BsYXkgcmVzdWx0c1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaXRzJykuaW5uZXJUZXh0ID0gYENhY2hlIEhpdHM6ICR7aGl0c30vJHt0b3RhbEFjY2Vzc2VzfWA7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3NlcycpLmlubmVyVGV4dCA9IGBDYWNoZSBNaXNzZXM6ICR7bWlzc2VzfS8ke3RvdGFsQWNjZXNzZXN9YDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXZlcmFnZS1hY2Nlc3MtdGltZScpLmlubmVyVGV4dCA9IGBBdmVyYWdlIE1lbW9yeSBBY2Nlc3MgVGltZTogJHthdmVyYWdlQWNjZXNzVGltZS50b0ZpeGVkKDIpfW5zYDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG90YWwtYWNjZXNzLXRpbWUnKS5pbm5lclRleHQgPSBgVG90YWwgTWVtb3J5IEFjY2VzcyBUaW1lOiAke3RvdGFsQWNjZXNzVGltZX1uc2A7XG5cbiAgICAvLyBDYWNoZSBzbmFwc2hvdFxuICAgIGxldCBjYWNoZVNuYXBzaG90ID0gY2FjaGVEYXRhLm1hcCgoYmxvY2ssIGlkeCkgPT4gYEJsb2NrICR7aWR4fTogJHtibG9ja31gKS5qb2luKCdcXG4nKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FjaGUtc25hcHNob3QnKS5pbm5lclRleHQgPSBjYWNoZVNuYXBzaG90O1xufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtcmVzdWx0cycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZG93bmxvYWRSZXN1bHRzKTtcblxuZnVuY3Rpb24gZG93bmxvYWRSZXN1bHRzKCkge1xuICAgIGxldCByZXN1bHRUZXh0ID0gYFxuICAgICAgICBIaXRzOiAke2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaXRzJykuaW5uZXJUZXh0fVxuICAgICAgICBNaXNzZXM6ICR7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3NlcycpLmlubmVyVGV4dH1cbiAgICAgICAgQXZlcmFnZSBNZW1vcnkgQWNjZXNzIFRpbWU6ICR7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F2ZXJhZ2UtYWNjZXNzLXRpbWUnKS5pbm5lclRleHR9XG4gICAgICAgIFRvdGFsIE1lbW9yeSBBY2Nlc3MgVGltZTogJHtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG90YWwtYWNjZXNzLXRpbWUnKS5pbm5lclRleHR9XG4gICAgICAgIENhY2hlIFNuYXBzaG90OiAke2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWNoZS1zbmFwc2hvdCcpLmlubmVyVGV4dH1cbiAgICBgO1xuICAgIGxldCBibG9iID0gbmV3IEJsb2IoW3Jlc3VsdFRleHRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcbiAgICBsZXQgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIGxpbmsuZG93bmxvYWQgPSAnY2FjaGVfc2ltdWxhdGlvbl9yZXN1bHRzLnR4dCc7XG4gICAgbGluay5jbGljaygpO1xufVxuIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwic2ltdWxhdGVDYWNoZSIsImJsb2NrU2l6ZSIsInBhcnNlSW50IiwidmFsdWUiLCJtYWluTWVtb3J5SW5wdXQiLCJtYWluTWVtb3J5VHlwZSIsInF1ZXJ5U2VsZWN0b3IiLCJjYWNoZU1lbW9yeUlucHV0IiwiY2FjaGVNZW1vcnlUeXBlIiwicHJvZ3JhbUZsb3dJbnB1dCIsImNhY2hlQWNjZXNzVGltZSIsIm1lbW9yeUFjY2Vzc1RpbWUiLCJwcm9ncmFtRmxvdyIsInNwbGl0IiwibWFwIiwiTnVtYmVyIiwibWFpbk1lbW9yeVNpemUiLCJNYXRoIiwiY2VpbCIsImNhY2hlTWVtb3J5U2l6ZSIsImNhY2hlIiwibWFpbk1lbW9yeSIsIkFycmF5IiwiZmlsbCIsIl8iLCJpbmRleCIsImhpdHMiLCJtaXNzZXMiLCJ0aW1lIiwiY2FjaGVCbG9ja3MiLCJjYWNoZURhdGEiLCJjYWNoZVRpbWUiLCJjdXJyZW50VGltZSIsImZvckVhY2giLCJhZGRyZXNzIiwiYmxvY2siLCJmbG9vciIsImluZGV4T2YiLCJsZW5ndGgiLCJscnVJbmRleCIsIm1pbiIsInRvdGFsQWNjZXNzZXMiLCJoaXRSYXRlIiwibWlzc1JhdGUiLCJjYWNoZU1pc3NQZW5hbHR5IiwiYXZlcmFnZUFjY2Vzc1RpbWUiLCJ0b3RhbEFjY2Vzc1RpbWUiLCJpbm5lclRleHQiLCJ0b0ZpeGVkIiwiY2FjaGVTbmFwc2hvdCIsImlkeCIsImpvaW4iLCJkb3dubG9hZFJlc3VsdHMiLCJyZXN1bHRUZXh0IiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.js\n"));

/***/ })

});