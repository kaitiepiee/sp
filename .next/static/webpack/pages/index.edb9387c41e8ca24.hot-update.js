/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("document.getElementById(\"simulate-button\").addEventListener(\"click\", simulateCache);\nfunction simulateCache() {\n    const blockSize = 2; // Block size in words\n    const mainMemorySize = 8; // Number of blocks in main memory\n    const cacheMemorySize = 4; // Number of blocks in cache\n    const cacheAccessTime = 1; // ns\n    const memoryAccessTime = 10; // ns\n    const setSize = 2; // Number of blocks per set\n    const programFlowInput = \"0, 2, 4, 0, 2, 6\"; // Program flow\n    const missPenalty = memoryAccessTime; // Miss penalty is equal to memory access time\n    const programFlow = programFlowInput.split(\",\").map(Number);\n    // Initialize cache (2 sets with 2 blocks each)\n    let cache = [\n        [],\n        []\n    ]; // Cache is organized into sets\n    let cacheSets = 2; // Number of sets\n    let cacheBlocksPerSet = setSize; // Number of blocks per set\n    let mainMemory = new Array(mainMemorySize).fill(null).map((_, index)=>index); // Dummy main memory\n    let hits = 0;\n    let misses = 0;\n    let time = 0;\n    function findSetIndex(address) {\n        return Math.floor(address / (mainMemorySize / cacheSets)) % cacheSets;\n    }\n    programFlow.forEach((address)=>{\n        let block = address; // Block number (in this case, address itself is the block number)\n        let setIndex = findSetIndex(block);\n        let set = cache[setIndex];\n        let index = set.findIndex((entry)=>entry.block === block);\n        if (index !== -1) {\n            // Cache hit\n            hits++;\n            set[index].time = time;\n        } else {\n            // Cache miss\n            misses++;\n            if (set.length < cacheBlocksPerSet) {\n                set.push({\n                    block,\n                    time\n                });\n            } else {\n                // LRU replacement\n                set.sort((a, b)=>a.time - b.time);\n                set[0] = {\n                    block,\n                    time\n                };\n            }\n            time += missPenalty;\n        }\n        time += cacheAccessTime;\n    });\n    let averageAccessTime = time / programFlow.length;\n    let totalAccessTime = time;\n    // Output results\n    document.getElementById(\"hits\").innerText = \"Hits: \".concat(hits, \"/\").concat(programFlow.length);\n    document.getElementById(\"misses\").innerText = \"Misses: \".concat(misses, \"/\").concat(programFlow.length);\n    document.getElementById(\"miss-penalty-output\").innerText = \"Miss Penalty: \".concat(missPenalty);\n    document.getElementById(\"average-access-time\").innerText = \"Average Memory Access Time: \".concat(averageAccessTime);\n    document.getElementById(\"total-access-time\").innerText = \"Total Memory Access Time: \".concat(totalAccessTime);\n    // Display cache snapshot\n    let cacheSnapshot = cache.map((set, setIndex)=>\"Set \".concat(setIndex, \": \").concat(set.map((entry)=>\"Block: \".concat(entry.block, \", Time: \").concat(entry.time)).join(\", \"))).join(\"\\n\");\n    document.getElementById(\"cache-snapshot\").innerText = cacheSnapshot;\n}\ndocument.getElementById(\"download-results\").addEventListener(\"click\", downloadResults);\nfunction downloadResults() {\n    let resultText = \"\\n        Hits: \".concat(document.getElementById(\"hits\").innerText, \"\\n        Misses: \").concat(document.getElementById(\"misses\").innerText, \"\\n        Miss Penalty: \").concat(document.getElementById(\"miss-penalty-output\").innerText, \"\\n        Average Memory Access Time: \").concat(document.getElementById(\"average-access-time\").innerText, \"\\n        Total Memory Access Time: \").concat(document.getElementById(\"total-access-time\").innerText, \"\\n        Cache Snapshot: \").concat(document.getElementById(\"cache-snapshot\").innerText, \"\\n    \");\n    let blob = new Blob([\n        resultText\n    ], {\n        type: \"text/plain\"\n    });\n    let link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"cache_simulation_results.txt\";\n    link.click();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n"));

/***/ })

});